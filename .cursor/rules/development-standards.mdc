---
description: 
globs: 
alwaysApply: true
---
# 习惯打卡小程序开发规范

## 总体架构

项目采用小程序原生开发架构，使用 TypeScript 进行开发，以确保代码类型安全和可维护性。

## 目录结构

- [pages/](mdc:pages) - 小程序页面
- [components/](mdc:components) - 可复用组件
- [utils/](mdc:utils) - 工具函数
- [styles/](mdc:styles) - 全局样式
- [images/](mdc:images) - 图片资源

## 代码规范

### 命名规范

- **文件命名**: 使用kebab-case (如: `habit-detail.ts`)
- **组件命名**: 使用PascalCase (如: `HabitCard`)
- **变量/函数**: 使用camelCase (如: `getUserInfo`)
- **常量**: 使用UPPER_SNAKE_CASE (如: `MAX_HABIT_COUNT`)
- **接口/类型**: 使用PascalCase并以I开头 (如: `IUserProfile`)

### TypeScript规范

- 使用严格模式 (`"strict": true`)
- 禁止使用 `any` 类型，除非有特殊注释说明
- 为所有函数添加返回类型注解
- 为所有属性和参数添加类型注解

### 组件规范

- 使用函数组件配合Hooks
- 每个组件必须有清晰的props类型定义
- 组件应该尽可能小且专注于单一职责
- 复杂UI逻辑应抽取为独立组件

### 样式规范

- 使用WXSS结合Less预处理器
- 遵循设计规范中的颜色系统和间距系统
- 使用响应式设计确保在不同设备上的一致体验
- 组件样式使用独立文件，避免样式污染

### API请求规范

- 使用统一的API请求封装
- 所有请求必须处理加载状态和错误状态
- 请求响应必须有类型定义
- 使用拦截器统一处理认证和错误

### 状态管理规范

- 使用Context+Hooks进行状态管理
- 复杂状态使用useReducer
- 避免过度使用全局状态
- 业务逻辑应与UI逻辑分离

## 性能优化

- 避免不必要的渲染
- 大型列表使用虚拟滚动
- 图片使用CDN并进行适当压缩
- 减少请求次数，合理使用缓存

## 安全规范

- 敏感数据不存储在本地
- 用户输入必须验证和转义
- API请求使用HTTPS
- 遵循微信小程序的安全最佳实践

## 代码提交规范

- 使用功能分支开发
- 提交信息遵循约定式提交规范
- 每个提交应该专注于单一改动
- 提交前进行代码自测

## 科学性原则

- 习惯培养功能需基于行为科学理论
- 习惯追踪需提供科学的反馈机制
- 用户激励系统需基于心理学研究设计

## 差异化功能

- 社区互动功能需突出用户连接和激励
- 数据分析需提供个性化且有洞察的反馈
- UI设计需体现产品差异化风格
